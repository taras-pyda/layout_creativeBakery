{"version":3,"sources":["scripts/main.js"],"names":["body","document","burgerMenu","querySelector","navLinks","querySelectorAll","stat","statistics","animTime","canShow","menuToggler","lines","menu","classList","toggle","forEach","line","className","includes","style","overflow","addEventListener","navLink","e","preventDefault","href","getAttribute","slice","scrollTarget","getElementById","headerHeight","clientHeight","offsetPosition","getBoundingClientRect","top","window","scrollBy","behavior","innerWidth","statHeight","offsetHeight","statOffset","Math","round","pageYOffset","startPoint","innerHeight","statistic","num","statisticNumber","parseInt","dataset","value","step","interval","setInterval","clearInterval","textContent"],"mappings":";AAAA,aAEA,IAAMA,EAAOC,SAASD,KAChBE,EAAaF,EAAKG,cAAc,wBAChCC,EAAWJ,EAAKK,iBAAiB,eACjCC,EAAON,EAAKG,cAAc,cAC1BI,EAAaP,EAAKK,iBAAiB,sBACnCG,EAAW,IACbC,GAAU,EAERC,EAAc,WACZC,IAAAA,EAAQX,EAAKK,iBAAiB,6BAC9BO,EAAOZ,EAAKG,cAAc,SAEhCS,EAAKC,UAAUC,OAAO,gBAEtBH,EAAMI,QAAQ,SAAAC,GACZA,EAAKH,UAAUC,OAAO,sCAGpBF,EAAKK,UAAUC,SAAS,gBAC1BlB,EAAKmB,MAAMC,SAAW,SAEtBpB,EAAKmB,MAAMC,SAAW,WAI1BlB,EAAWmB,iBAAiB,QAASX,GAErCN,EAASW,QAAQ,SAAAO,GACfA,EAAQD,iBAAiB,QAAS,SAASE,GACzCA,EAAEC,iBAEIC,IAAAA,EAAO,KAAKC,aAAa,QAAQC,MAAM,GACvCC,EAAe3B,SAAS4B,eAAeJ,GACvCK,EAAe9B,EAAKG,cAAc,WAAW4B,aAE7CC,EADkBJ,EAAaK,wBAAwBC,IACpBJ,EAEzCK,OAAOC,SAAS,CACdF,IAAKF,EACLK,SAAU,WAGRf,EAAQL,UAAUC,SAAS,SAAWiB,OAAOG,WAAa,MAC5D5B,QAKNyB,OAAOd,iBAAiB,SAAU,WAC5B,IAACZ,EACI,OAAA,EAGH8B,IAAAA,EAAajC,EAAKkC,aAClBC,EAAaC,KAAKC,MACtBrC,EAAK2B,wBAAwBC,IAAMC,OAAOS,aAEtCC,EAAaV,OAAOW,YAAcP,EAAa,EAEjDJ,OAAOS,YAAcH,EAAaI,GACjCV,OAAOS,YAAcH,EAAaI,GACrCtC,EAAWQ,QAAQ,SAACgC,GACdC,IAAAA,EAAM,EACJC,EAAkBC,SAASH,EAAUI,QAAQC,OAC7CC,EAAQJ,EAAkB,IAC5B,IACCA,EAAkB,IACjB,GACA,EAEAK,EAAWC,YAAY,YAC3BP,GAAOK,GAEGJ,IACRD,EAAMC,EACNO,cAAcF,IAGhBP,EAAUU,YAAeV,EAAUI,QAAQC,MAAMlC,SAAS,KACnD8B,GAAAA,OAAAA,EACHA,MAAAA,GAXWxC,GAAYyC,EAAkBI,IAc/C5C,GAAU","file":"main.80a8f96f.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\n\nconst body = document.body;\nconst burgerMenu = body.querySelector('.header__menu-opener');\nconst navLinks = body.querySelectorAll('a[href^=\"#\"');\nconst stat = body.querySelector('.statistic');\nconst statistics = body.querySelectorAll('.statistic__number');\nconst animTime = 1000;\nlet canShow = true;\n\nconst menuToggler = () => {\n  const lines = body.querySelectorAll('.header__menu-opener-line');\n  const menu = body.querySelector('.menu');\n\n  menu.classList.toggle('menu--active');\n\n  lines.forEach(line => {\n    line.classList.toggle('header__menu-opener-line--active');\n  });\n\n  if (menu.className.includes('menu--active')) {\n    body.style.overflow = 'hidden';\n  } else {\n    body.style.overflow = 'visible';\n  }\n};\n\nburgerMenu.addEventListener('click', menuToggler);\n\nnavLinks.forEach(navLink => {\n  navLink.addEventListener('click', function(e) {\n    e.preventDefault();\n\n    const href = this.getAttribute('href').slice(1);\n    const scrollTarget = document.getElementById(href);\n    const headerHeight = body.querySelector('.header').clientHeight;\n    const elementPosition = scrollTarget.getBoundingClientRect().top;\n    const offsetPosition = elementPosition - headerHeight;\n\n    window.scrollBy({\n      top: offsetPosition,\n      behavior: 'smooth',\n    });\n\n    if (navLink.className.includes('menu') && window.innerWidth < 1024) {\n      menuToggler();\n    }\n  });\n});\n\nwindow.addEventListener('scroll', () => {\n  if (!canShow) {\n    return false;\n  }\n\n  const statHeight = stat.offsetHeight;\n  const statOffset = Math.round(\n    stat.getBoundingClientRect().top + window.pageYOffset\n  );\n  const startPoint = window.innerHeight - statHeight / 4;\n\n  if (window.pageYOffset > statOffset - startPoint\n    && window.pageYOffset < statOffset + startPoint) {\n    statistics.forEach((statistic) => {\n      let num = 0;\n      const statisticNumber = parseInt(statistic.dataset.value);\n      const step = (statisticNumber > 1000)\n        ? 100\n        : (statisticNumber > 100)\n          ? 10\n          : 1;\n      const stepTime = animTime / (statisticNumber / step);\n      const interval = setInterval(() => {\n        num += step;\n\n        if (num > statisticNumber) {\n          num = statisticNumber;\n          clearInterval(interval);\n        }\n\n        statistic.textContent = (statistic.dataset.value.includes('k'))\n          ? `${num}K+`\n          : num;\n      }, stepTime);\n\n      canShow = false;\n    });\n  }\n});\n"]}